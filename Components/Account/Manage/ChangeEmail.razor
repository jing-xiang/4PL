@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using System.Security.Claims
@using _4PL.Data

@inject NavigationManager NavigationManager
@inject ILogger<ChangeEmail> Logger
@inject IConfiguration Configuration
@inject HttpClient HttpClient

<PageTitle>Manage email</PageTitle>

<div class="row">
    <div class="col-md-8">
        <h3>Change email</h3>
        <hr />
        <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
            <AntiforgeryToken />
        </form>
        @if (updateMessage != null)
        {
            <div align="center" style="margin-bottom:10px" class="alert alert-@messageType">@updateMessage</div>
        }
        <EditForm Model="EmailInput" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <strong>Current Email</strong>
            <input class="mb-3 form-control" type="text" readonly value="@currEmail" />

            <strong>New Email</strong>
            <InputText @bind-Value="EmailInput.NewEmail" class="form-control" aria-required="true" />
            <label for="new-email" class="form-label"></label>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update</button>
        </EditForm>
    </div>
</div>

@code {

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private EmailInputModel EmailInput { get; set; } = new();

    private string? apiBaseUrl;
    private string? currEmail;
    private string? currName;
    private string? updateMessage;
    private string? messageType = "danger";
    private ApplicationUser user = new();

    // private bool isEmailConfirmed;

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];
        currEmail = HttpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
    }

    private async Task OnValidSubmitAsync()
    {
        if (EmailInput.NewEmail == currEmail)
        {
            updateMessage = "New email must be different from the current email.";
            return;
        }

        // Temporary model to be passed
        user.Name = EmailInput.NewEmail;
        user.Email = currEmail;

        var result = await HttpClient.PutAsJsonAsync($"{apiBaseUrl}/api/Snowflake/{currEmail}/UpdateEmail", user);
        if (result.IsSuccessStatusCode)
        {
            await OnInitializedAsync();
            updateMessage = await result.Content.ReadAsStringAsync();
            messageType = "success";
        } else
        {
            updateMessage = await result.Content.ReadAsStringAsync();
        }
        return;

        // if (Input.NewEmail is null || Input.NewEmail == email)
        // {
        //     message = "Your email is unchanged.";
        //     return;
        // }

        // var userId = await UserManager.GetUserIdAsync(user);
        // var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
        //     new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        // await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        // message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        // if (email is null)
        // {
        //     return;
        // }

        // var userId = await UserManager.GetUserIdAsync(user);
        // var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        //     new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        // await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        // message = "Verification email sent. Please check your email.";
    }

    private sealed class EmailInputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
