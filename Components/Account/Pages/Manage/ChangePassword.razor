@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using _4PL.Data

@* @inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor *@
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject IConfiguration Configuration
@inject HttpClient HttpClient

<PageTitle>Change password</PageTitle>

<div class="row">
    <div class="col-md-8">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <h3>Change Password</h3>
            <hr />
            
            <ValidationSummary class="text-danger" role="alert" />
            @if (!string.IsNullOrEmpty(updateMessage))
            {
                <div align="center" style="margin-bottom:10px" class="alert alert-@messageType">@updateMessage</div>
            }
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                <label for="old-password" class="form-label">Old password</label>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                <label for="new-password" class="form-label">New password</label>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                <label for="confirm-password" class="form-label">Confirm password</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </EditForm>
    </div>
</div>

@code {
    private string? apiBaseUrl;
    private ApplicationUser? currUser;
    private string? currEmail;

    private string? updateMessage;
    private string? messageType;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];
        currEmail = HttpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        currUser = await HttpClient.GetFromJsonAsync<ApplicationUser>($"{apiBaseUrl}/api/Snowflake/e={currEmail}");
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.OldPassword == Input.NewPassword)
        {
            updateMessage = "New password needs to be different.";
            messageType = "danger";
            return;
        }

        currUser.Password = Input.OldPassword;
        var validate = await HttpClient.PostAsJsonAsync($"{apiBaseUrl}/api/Snowflake/ValidatePassword", currUser);
        if (!validate.IsSuccessStatusCode)
        {
            updateMessage = "Old password is incorrect.";
            messageType = "danger";
            return;
        }

        currUser.Password = Input.NewPassword;
        var result = await HttpClient.PutAsJsonAsync($"{apiBaseUrl}/api/Snowflake/{currEmail}/ResetPassword", currUser);
        if (result.IsSuccessStatusCode)
        {
            updateMessage = await result.Content.ReadAsStringAsync();
            messageType = "success";
            return;
        } else
        {
            updateMessage = $"Something went wrong. {result.Content.ReadAsStringAsync()}";
            messageType = "danger";
            return;
        }


        // var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        // if (!changePasswordResult.Succeeded)
        // {
        //     message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
        //     return;
        // }

        // await SignInManager.RefreshSignInAsync(user);
        // Logger.LogInformation("User changed their password successfully.");

        // RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
