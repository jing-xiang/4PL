@page "/Admin"

@using System.ComponentModel.DataAnnotations
@using _4PL.Data

@inject ILogger<AddAccount> Logger
@inject IConfiguration Configuration
@inject HttpClient HttpClient

<PageTitle>Admin</PageTitle>

<h3>Search User</h3>
<StatusMessage Message=@updateMessage/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="searchUser" OnValidSubmit="SearchUser" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="name">Email</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Search</button>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private SearchModel Input { get; set; } = new();

    private string? updateMessage;

    private string? apiBaseUrl;

    ApplicationUser? user;

    protected override void OnInitialized()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];
        // user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        // username = await UserManager.GetUserNameAsync(user);
        // phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        // Input.PhoneNumber ??= phoneNumber;
    }

    private async Task SearchUser()
    {
        try
        {
            user = await HttpClient.GetFromJsonAsync<ApplicationUser>($"{apiBaseUrl}/api/Snowflake/e={Input.Email}");
        }
        catch (HttpRequestException ex)
        {
            Logger.LogInformation("User not found.");
            updateMessage = "User does not exist.";
            return;
        }



        // if (Input.PhoneNumber != phoneNumber)
        // {
        //     var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
        //     if (!setPhoneResult.Succeeded)
        //     {
        //         RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
        //     }
        // }

        // await SignInManager.RefreshSignInAsync(user);
        // RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class SearchModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
    }
}
