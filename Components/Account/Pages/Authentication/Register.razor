@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using _4PL.Data

@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration
@inject HttpClient HttpClient

<PageTitle>Register</PageTitle>

<div align="center" style="margin:50px">
    <div class="col-md-4">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h1>Register a New Account.</h1>
            <hr />
            <ValidationSummary class="text-danger" />
            @if (!string.IsNullOrEmpty(errorMessage)) { <div style="margin-bottom:10px" class="text-danger">@errorMessage</div> }
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Name" class="form-control" autocomplete="username" aria-required="true" placeholder="name" />
                <label for="name">Name</label>
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div style="margin:10px">
        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Already have an account?</a>
    </div>
</div>

<div style="margin:10px">
    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/ResetPassword", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Reset password for testing purposes</a>
</div>

<div style="margin:10px">
    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/InvalidPasswordReset", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Invalid link for testing purposes</a>
</div>

<div style="margin:10px">
    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/ResetPasswordConfirmation", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">reset confirmation for testing purposes</a>
</div>

<div style="margin:10px">
    <a href="@(NavigationManager.GetUriWithQueryParameters("/Maintenance", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">authorised view for testing purposes</a>
</div>

@code {
    
    [SupplyParameterFromForm]
    private UserRegisterModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? errorMessage;

    private string? apiBaseUrl;

    protected override void OnInitialized()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];
    }

    public async Task RegisterUser(EditContext editContext)
    {
        ApplicationUser user = CreateUser();
        user.Name = Input.Name;
        user.Email = Input.Email;

        var response = await HttpClient.PostAsJsonAsync($"{apiBaseUrl}/api/Snowflake/RegisterUser", user);
        if (!response.IsSuccessStatusCode)
        {
            errorMessage = await response.Content.ReadAsStringAsync();
            return;
        }

        Logger.LogInformation("User created a new account with one-time password.");

        RedirectManager.RedirectTo(
            "Account/RegisterConfirmation",
            new() { ["returnUrl"] = ReturnUrl });
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private sealed class UserRegisterModel
    {
        [Required]
        public string Name { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
    }
}