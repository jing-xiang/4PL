@page "/Account/ResetPassword/{token}"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using _4PL.Data

@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration
@inject HttpClient HttpClient

<PageTitle>Reset Password</PageTitle>

<div align="center" style="margin:50px">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <h1>Reset Password</h1>
            <hr />

            <ValidationSummary class="text-danger" role="alert" />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div style="margin-bottom:10px" class="text-danger">@errorMessage</div>
            }
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
                <label for="password" class="form-label">New Password</label>
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
                <label for="confirm-password" class="form-label">Confirm New Password</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    private ApplicationUser? currUser;

    private string? apiBaseUrl;

    [Parameter]
    public string? Token { get; set; }

    [SupplyParameterFromForm]
    private PasswordResetModel Input { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];
        try
        {
            ApplicationUser? user = await HttpClient.GetFromJsonAsync<ApplicationUser>($"{apiBaseUrl}/api/Snowflake/t={Token}");      
            currUser = user;
        }
        catch (HttpRequestException ex)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
            return;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (currUser == null)
        {
            return;
        }
        currUser.Password = Input.Password;
        var result = await HttpClient.PutAsJsonAsync($"{apiBaseUrl}/api/Snowflake/{currUser.Email}/ResetPassword", currUser);
        if (result.IsSuccessStatusCode)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        } else
        {
            errorMessage = $"Something went wrong. {result.Content.ReadAsStringAsync()}";
            return;
        }
    }

    private sealed class PasswordResetModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
