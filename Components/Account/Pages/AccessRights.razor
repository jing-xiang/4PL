@page "/Account/AccessRights"

@using System.ComponentModel.DataAnnotations;
@using System.Text;
@using System.Text.Encodings.Web;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.WebUtilities;
@using _4PL.Data;
@using Snowflake.Data;
@using Newtonsoft.Json;

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration
@inject HttpClient HttpClient
@inject SnowflakeDbContext DbContext

<PageTitle>Access Rights</PageTitle>

<h3>Access Rights</h3>

<div align="center">
    <div class="col-md-4">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="FetchAccessRights" FormName="fetchaccessrights">
            <DataAnnotationsValidator />
            <hr />
            <ValidationSummary class="text-danger" />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div style="margin-bottom:10px" class="text-danger">@errorMessage</div>
            }
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Name" class="form-control" autocomplete="username" aria-required="true" placeholder="name" />
                <label for="name">Name</label>
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">View Access Rights</button>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(accessRightsString))
{

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Access Right</th>
                <th>Permission</th>
                <th>Select</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < accessRights.Length; i++)
            {
                <tr>
                    <td>
                        @accessRightsHeadings[i].Replace("[", "") 
                    </td>
                    <td>
                        @if (accessRights[i].ToString().ToLower().Contains("false"))
                        {
                            <span class="text-danger">No</span>
                        }
                        else if (accessRights[i].ToString().ToLower().Contains("true"))
                        {
                            <span class="text-success">Yes</span>
                        }
                        else
                        {
                            <span class="text-danger">Not Found.</span>
                        }
                    </td>
                    <td>
                        <input type="checkbox" name="accessRights[@i]" value="@accessRights[i]">
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div>
    <h2>Copy Access Rights to another user?</h2>
    </div>
    <div align="center">
        <div class="col-md-4">
            <EditForm Model="InputTarget" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="CopyAccessRights" FormName="copyaccessrightsform">
                <DataAnnotationsValidator />
                <hr />
                <ValidationSummary class="text-danger" />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div style="margin-bottom:10px" class="text-danger">@errorMessage</div>
                }
                <div class="form-floating mb-3">
                    <InputText @bind-Value="InputTarget.Name" class="form-control" autocomplete="username" aria-required="true" placeholder="name" />
                    <label for="name">Name</label>
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="InputTarget.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Copy Access Rights</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <p align="center">No access rights found for the provided email.</p>
}

@code {
    [SupplyParameterFromForm]
    private UserRegisterModel Input { get; set; } = new();

    private UserRegisterModel InputTarget { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? errorMessage;

    private string? apiBaseUrl;
    private string? accessRightsString;
    private string? accessRightsHeadingsString;
    private string[]? accessRights;
    private string[]? accessRightsHeadings;

    protected override void OnInitialized()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];
    }


    public async Task<string[]> FetchAccessRights(EditContext editContext)
    {
        var response = await HttpClient.PostAsJsonAsync($"{apiBaseUrl}/api/AccessRights/FetchAccessRights", Input.Email);
        var response1 = await HttpClient.PostAsJsonAsync($"{apiBaseUrl}/api/AccessRights/FetchAccessRightsHeadings", Input.Email);
        if (!response.IsSuccessStatusCode)
        {
            errorMessage = await response.Content.ReadAsStringAsync();
            return [""];
        }
        else
        {
            accessRightsString = response.Content.ReadAsStringAsync().Result;
            Logger.LogInformation("User access rights found.");
            accessRightsHeadingsString = response1.Content.ReadAsStringAsync().Result;
            accessRightsHeadings = accessRightsHeadingsString.Split(',');
            return accessRights = accessRightsString.Split(',');
        }
    }
    public async Task CopyAccessRights(EditContext editContext)
    {
        RedirectManager.RedirectTo("/");
        var response = await HttpClient.PostAsJsonAsync($"{apiBaseUrl}/api/AccessRights/CopyAccessRights", Input.Email);
        if (!response.IsSuccessStatusCode)
        {
            errorMessage = await response.Content.ReadAsStringAsync();
            RedirectManager.RedirectTo(ReturnUrl/*, forceLoad: true*/);
        }
        else
        {
            Logger.LogInformation("Successfully copied.");
        }
    }

    private sealed class UserRegisterModel
    {
        [Required]
        public string Name { get; set; } = "";
         
        public string Name1 { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
        
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email1 { get; set; } = "";
    }

    private sealed class TargetUserRegisterModel
    {
        [Required]
        public string Name { get; set; } = "";
        public string Name1 { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
        public string Email1 { get; set; } = "";
    }
}
