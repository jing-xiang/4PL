@page "/ratecard"
@page "/ratecard/upload"

@rendermode InteractiveServer
@using System.Net.Http.Headers
@using System.Text.Json
@using _4PL.Data

@inject NavigationManager NavManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient HttpClient
@inject IConfiguration Configuration
@inject IJSRuntime JS

<PageTitle>Ratecard</PageTitle>

<h1>Upload Files</h1>

<p>
    <label>
        Upload up to @maxAllowedFiles files:
        <InputFile OnChange="@OnInputFileChange" multiple />
    </label>
</p>

@if (files.Count > 0)
{
    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in files)
                {
                    <li>
                        File: @file.Name

                        @if (FileUpload(uploadResults, file.Name, out var result))
                        {
                            <span class="text-success">
                                Upload successful!
                            </span>
                        }
                        else
                        {
                            <span class="text-danger">
                                There was an error uploading the file
                                (ErrorCode: @result.ErrorCode).
                                @result.ErrorMessage
                                Please try again.
                            </span>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
}

<p>
    @message
</p>

@if (isLoading)
{
    <p>Uploading file...</p>
}

<RateCardSearch></RateCardSearch>

@code {
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 1;
    private bool shouldRender;
    private string? message;

    public bool isLoading = false;

    protected override bool ShouldRender() => shouldRender;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = true;
        isLoading = true;
        StateHasChanged();
        shouldRender = false;
        long maxFileSize = 1024 * 1000;
        var upload = false;
        uploadResults.Clear();
        files.Clear();

        using var content = new MultipartFormDataContent();

        if (e.FileCount > maxAllowedFiles)
        {
            message = $"Try again with no more than {maxAllowedFiles} files.";
        }
        else
        {
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                if (uploadResults.SingleOrDefault(
                    f => f.FileName == file.Name) is null)
                {
                    try
                    {
                        files.Add(new() { Name = file.Name });

                        var fileContent =
                            new StreamContent(file.OpenReadStream(maxFileSize));

                        fileContent.Headers.ContentType =
                            new MediaTypeHeaderValue(file.ContentType);

                        content.Add(
                            content: fileContent,
                            name: "\"files\"",
                            fileName: file.Name);

                        upload = true;
                    }
                    catch (Exception ex)
                    {
                        // Logger.LogInformation(
                        //     "{FileName} not uploaded (Err: 5): {Message}",
                        //     file.Name, ex.Message);


                        uploadResults.Add(
                            new()
                                {
                                    FileName = ex.Message,
                                    ErrorCode = 5,
                                    Uploaded = false
                                });
                    }
                }
            }

            message = string.Empty;
        }

        if (upload)
        {
            var client = ClientFactory.CreateClient();

            var response =
                await client.PostAsync($"{Configuration["ApiBaseUrl"]}/api/RateCard/UploadExcel", content);

            if (response.IsSuccessStatusCode)
            {
                var options =
                    new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true,
                        };

                using var responseStream =
                    await response.Content.ReadAsStreamAsync();

                var newUploadResults = await JsonSerializer
                    .DeserializeAsync<IList<UploadResult>>(responseStream, options);



                if (newUploadResults is not null)
                {
                    
                    uploadResults = uploadResults.Concat(newUploadResults).ToList();

                    // await client.PostAsync($"/api/ratecard/CreateRcTransaction/" + uploadResults[0].StoredFileName, null);
                    HttpResponseMessage result = await HttpClient.PostAsJsonAsync($"{Configuration["ApiBaseUrl"]}/api/ratecard/CreateRcTransaction/", uploadResults[0].StoredFileName);
                    // JS.InvokeVoidAsync("alert", files.Count);

                    // string transactionId = result.Content.ReadAsStringAsync().Result;
                    List<string> ratecardIds = await JsonSerializer
                        .DeserializeAsync<List<string>>(await result.Content.ReadAsStreamAsync(), options);
                    

                    JS.InvokeVoidAsync("alert", $"Number of rows updated: {ratecardIds.Count}");


                    // NavManager.NavigateTo("/ratecard/" + transactionId + "/0");


                }

            }
        }
        isLoading = false;
        StateHasChanged();
        shouldRender = true;

        
    }

    private static bool FileUpload(IList<UploadResult> uploadResults,
        string? fileName, out UploadResult result)
    {
        result = uploadResults
            .SingleOrDefault(f => f.FileName == fileName) ?? new();

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }
}