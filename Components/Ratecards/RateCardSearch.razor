@page "/ratecard/search"
@page "/ratecard"

@inject HttpClient HttpClient
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject IConfiguration Configuration
@rendermode InteractiveServer
@using _4PL.Data
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics


<PageTitle>Ratecard</PageTitle>

<h3>Search Ratecard</h3>

<EditForm Model="FormModel" OnSubmit="HandleFormSubmit">
    <ValidationSummary />

    <InputText @bind-Value="FormModel.Lane_ID" />
    <ValidationMessage For="() => FormModel.Lane_ID" />

    <InputText @bind-Value="FormModel.Transport_Mode" />
    <ValidationMessage For="() => FormModel.Transport_Mode" />

    <InputText @bind-Value="FormModel.Function" />
    <ValidationMessage For="() => FormModel.Function" />


    <InputText @bind-Value="FormModel.Controlling_Customer_Matchcode" />
    <ValidationMessage For="() => FormModel.Controlling_Customer_Matchcode" />

    <InputText @bind-Value="FormModel.Controlling_Customer_Name" />
    <ValidationMessage For="() => FormModel.Controlling_Customer_Name" />



    <InputDate @bind-Value=FormModel.Rate_Validity_From ParsingErrorMessage="Must be a date" />
    <ValidationMessage For="() => FormModel.Rate_Validity_From" />

    <InputDate @bind-Value=FormModel.Rate_Validity_To ParsingErrorMessage="Must be a date" />
    <ValidationMessage For="() => FormModel.Rate_Validity_To" />

    <InputText @bind-Value="FormModel.POL_Name" />
    <ValidationMessage For="() => FormModel.POL_Name" />

    <InputText @bind-Value="FormModel.POL_Country" />
    <ValidationMessage For="() => FormModel.POL_Country" />

    <InputText @bind-Value="FormModel.POL_Port" />
    <ValidationMessage For="() => FormModel.POL_Port" />

    <InputText @bind-Value="FormModel.POD_Name" />
    <ValidationMessage For="() => FormModel.POD_Name" />

    <InputText @bind-Value="FormModel.POD_Country" />
    <ValidationMessage For="() => FormModel.POD_Country" />

    <InputText @bind-Value="FormModel.POD_Port" />
    <ValidationMessage For="() => FormModel.POD_Port" />



    <button class="w-100 btn btn-lg btn-primary">Submit</button>

</EditForm>

<div>
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item"><button class="w-100 btn btn-secondary" @onclick="Prev">Prev</button></li>
            <li class="page-item"><button class="w-100 btn btn-secondary" @onclick="Next">Next</button></li>
        </ul>
    </nav>
</div>

<p>@offset</p>

@if (isLoading)
{
    <p>Fetching data</p>
}

else if (ratecardIds.Count == 0)
{
    <p>No ratecards available</p>
}
else 
{

    <RateCardDetails ratecardIds="@ratecardIds"></RateCardDetails>
}

@code {

    public RateCard FormModel { get; set; } = new();

    public List<RateCard> ratecards = new();
    [Parameter]
    public List<string> ratecardIds { get; set; } = new();
    [Parameter]
    public int offset { get; set; } = 0;
    public bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // ratecards = await HttpClient.GetFromJsonAsync<List<RateCard>>($"{NavManager.BaseUri}api/RateCard/GetTransactionDetails/{"%"}/{0}");
        ratecardIds = await FetchRatecardIds();
        isLoading = false;
        StateHasChanged();
    }

    // protected override 

    public void HandleFormSubmit()
    {
        JS.InvokeVoidAsync("alert", "Form submitted!");
    }

    public async void Next()
    {
        isLoading = true;
        offset += 10;
        ratecardIds.Clear();
        ratecardIds = await FetchRatecardIds();
        isLoading = false;
        StateHasChanged();
    }

    public async void Prev()
    {
        isLoading = true;
        offset = (offset >= 10) ? offset - 10 : 0;
        ratecardIds.Clear();
        ratecardIds = await FetchRatecardIds();
        isLoading = false;
        StateHasChanged();
    }

    public async Task<List<string>> FetchRatecardIds()
    {
        return await HttpClient.GetFromJsonAsync<List<string>>($"{Configuration["ApiBaseUrl"]}/api/RateCard/Search?limit=10&offset={offset}");
    }
}
