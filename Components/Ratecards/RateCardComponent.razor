@inject HttpClient HttpClient
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject IConfiguration Configuration
@rendermode InteractiveServer
@using _4PL.Data
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics


@if (rc == null) {}
else
{

    <div class="card border-dark overflow-auto my-1" style="max-width:82.5vw;">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="thead-light">
                        <tr>
                            <th>Ratecard ID</th>
                            <th>Lane ID</th>
                            <th>Transport Mode</th>
                            <th>Controlling Customer Matchcode</th>
                            <th>Controlling Customer Name</th>
                            <th>Transport Mode</th>
                            <th>Function</th>
                            <th>Rate Validity From</th>
                            <th>Rate Validity To</th>
                            <th>POL Name</th>
                            <th>POL Country</th>
                            <th>POL Port</th>
                            <th>POD Name</th>
                            <th>POD Country</th>
                            <th>POD Port</th>
                            <th>Creditor Matchcode</th>
                            <th>Pickup Address</th>
                            <th>Delivery Address</th>
                            <th>Dangerous Goods</th>
                            <th>Temperature Controlled</th>
                            <th>Container Mode</th>
                            <th>Container Type</th>
                            <th></th>
                        </tr>
                    </thead>

                    <tbody>
                        <tr>
                            <td>@rc.Id</td>
                            <td>@rc.Lane_ID</td>
                            <td>@rc.Transport_Mode</td>
                            <td>@rc.Controlling_Customer_Matchcode</td>
                            <td>@rc.Controlling_Customer_Name</td>
                            <td>@rc.Transport_Mode</td>
                            <td>@rc.Function</td>
                            <td>@rc.Rate_Validity_From.ToString("MM/dd/yyyy")</td>
                            <td>@rc.Rate_Validity_To.ToString("MM/dd/yyyy")</td>
                            <td>@rc.POL_Name</td>
                            <td>@rc.POL_Country</td>
                            <td>@rc.POL_Port</td>
                            <td>@rc.POD_Name</td>
                            <td>@rc.POD_Country</td>
                            <td>@rc.POD_Port</td>
                            <td>@rc.Creditor_Matchcode</td>
                            <td>@rc.Pickup_Address</td>
                            <td>@rc.Delivery_Address</td>
                            <td>@rc.Dangerous_Goods</td>
                            <td>@rc.Temperature_Controlled</td>
                            <td>@rc.Container_Mode</td>
                            <td>@rc.Container_Type</td>
                            <td>
                                <button class="w-100 btn btn-lg btn-danger" @onclick="() => DeleteRatecard(rc.Id.ToString())">Delete</button>
                            </td>
                        </tr>
                    </tbody>

                </table>
            </div>

            <span>
                <button class="w-100 btn btn-toolbar btn-outline-primary" @onclick="toggleShowCharges">Show charges</button>
            </span>

            @if (!showCharges) {}

            else
            {
                <ChargesComponent ratecardId="@ratecardId"></ChargesComponent>
            }

        </div>
    </div>

}


@code {

    [Parameter]
    public RateCard rc { get; set; } = null;
    [Parameter]
    public string ratecardId { get; set; } = "";
    [Parameter]
    public Func<string, Task<HttpResponseMessage>> deleteChargeMethod { get; set; }
    [Parameter]
    public Func<string, Task<HttpResponseMessage>> deleteRatecardMethod { get; set; }

    public List<string> chargeIds { get; set; } = new();

    public bool showCharges = false;

    protected override async Task OnInitializedAsync()
    {
        if (ratecardId != "")
        {
            rc = await HttpClient.GetFromJsonAsync<RateCard>($"{Configuration["ApiBaseUrl"]}/api/RateCard/GetRateCard/{ratecardId}");
            chargeIds = await HttpClient.GetFromJsonAsync<List<string>>($"{Configuration["ApiBaseUrl"]}/api/RateCard/GetChargeIds/{ratecardId}");
        }
    }

    async Task DeleteRatecard(string ratecardId)
    {

        bool confirm = await JS.InvokeAsync<bool>("confirm", "Do you want to delete the ratecard and all its associated charges?");

        if (!confirm)
        {
            return;
        }

        Debug.WriteLine($">>> Logging: {ratecardId}");

        HttpResponseMessage result;

        // foreach(Charge charge in rc.Charges)
        foreach (string chargeId in chargeIds)
        {
            result = await HttpClient.DeleteAsync($"{Configuration["ApiBaseUrl"]}/api/RateCard/DeleteCharge/{chargeId}");
            // result = await deleteChargeMethod.Invoke(chargeId);

        }

        result = await HttpClient.DeleteAsync($"{Configuration["ApiBaseUrl"]}/api/RateCard/DeleteRatecard/{ratecardId}");

        // result = await deleteRatecardMethod.Invoke(ratecardId);

        Debug.WriteLine($"Logging: {result.StatusCode}");

        if (result.Content.ReadAsStringAsync().Result == "true")
        {
            rc = null;
            StateHasChanged();
            await JS.InvokeVoidAsync("alert", "Ratecard and its associated charges deleted");
        }

        // NavManager.Refresh(true);
    }

    void toggleShowCharges()
    {
        showCharges = !showCharges;
    }

}
