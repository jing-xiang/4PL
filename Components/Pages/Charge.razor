@page "/charge"
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.QuickGrid
@using _4PL.Data
@inject IConfiguration Configuration
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavManager
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

@rendermode InteractiveServer

<PageTitle>Charge</PageTitle>

<h3 class="container">Charge</h3>
<div class="container">

    <EditForm Model="addChargeReference" OnSubmit="CreateCharge" Enhance>
        <label class="label-control">Add Charge</label>
        <InputText @bind-Value="addChargeReference.Charge_Code" class="form-control" autocomplete="off"></InputText>
        <InputText @bind-Value="addChargeReference.Charge_Description" class="form-control" autocomplete="off"></InputText>
        <button type="submit" class="btn btn-primary my-2">Add</button>
    </EditForm>
    <EditForm Model="searchChargeReference" OnSubmit="FetchCharges" Enhance>
        <label class="label-control">Search Charge</label>
        <InputText @bind-Value="searchChargeReference.Charge_Code" class="form-control" autocomplete="off"></InputText>
        <InputText @bind-Value="searchChargeReference.Charge_Description" class="form-control" autocomplete="off"></InputText>
        <button type="submit" class="btn btn-primary my-2">Search</button>
    </EditForm>
    <br />
    <QuickGrid Items="@ChargesQueryable" @ref="grid" Pagination="pagination">
        <PropertyColumn Title="Charge Code" Property="@(c => c.Charge_Code)" Sortable="true" InitialSortDirection="SortDirection.Ascending"></PropertyColumn>
        <PropertyColumn Title="Charge Description" Property="@(c => c.Charge_Description)" Sortable="true" InitialSortDirection="SortDirection.Ascending"></PropertyColumn>
        <TemplateColumn Title="Action">
            <button @onclick="@(() => DeleteCharge(context.Charge_Description))" class="btn btn-danger">Delete</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@pagination" />

</div>



@code {
    IQueryable<ChargeReference> ChargesQueryable = Enumerable.Empty<ChargeReference>().AsQueryable();

    [SupplyParameterFromForm]
    ChargeReference addChargeReference { get; set; } = new();
    [SupplyParameterFromForm]
    ChargeReference searchChargeReference { get; set; } = new();
    // static List<ContainerTypeReference> containerTypesList = new();

    QuickGrid<ChargeReference>? grid;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    async Task CreateCharge()
    {
        searchChargeReference = new(); // clear if there were previous searches
        string chargeCode = addChargeReference.Charge_Code.Trim();// trim leading and trailing spaces
        string chargeDescription = addChargeReference.Charge_Description.Trim();// trim leading and trailing spaces
        if (chargeCode == "" && chargeDescription == "")
        {
            await JS.InvokeVoidAsync("alert", "Please fill in a charge code and description");
        }
        else if (chargeCode == "")
        {
            await JS.InvokeVoidAsync("alert", "Please fill in a charge code");
        }
        else if (chargeDescription == "")
        {
            await JS.InvokeVoidAsync("alert", "Please fill in a charge description");
        }
        // containerTypesList.Add(containerTypeReference);
        // ConvertListToQueryable();
        HttpResponseMessage response = await Http.PostAsJsonAsync<string>($"{Configuration["ApiBaseUrl"]}/api/Charge/CreateCharge", chargeCode);
        string result = response.Content.ReadAsStringAsync().Result;
        if (result == "Error - duplicate primary keys")
        {
            await JS.InvokeVoidAsync("alert", "Charge already exists");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Successfully added charge with description: {result}");
            // Navigation?
            StateHasChanged();
            //NavManager.NavigateTo("/container-type");
        }
        addChargeReference = new();
    }

    async Task DeleteCharge(string chargeDescription)
    {
        string confirmMessage = $"Confirm delete charge with description: {chargeDescription}?";
        bool confirmed = await JS.InvokeAsync<bool>("confirm", confirmMessage);
        if (confirmed)
        {
            string searchTerm = searchChargeReference.Charge_Description; // TBC
            Debug.WriteLine($">>> Logging: {chargeDescription}");

            HttpResponseMessage result = await Http.DeleteAsync($"{Configuration["ApiBaseUrl"]}/api/Charge/DeleteCharge/{chargeDescription}");
            // result = await Http.PostAsJsonAsync<string>($"{Configuration["ApiBaseUrl"]}/api/ContainerType/DeleteContainerType/{containerType}", containerType);

            Debug.WriteLine($"Logging: {result.StatusCode}");

            if (result.Content.ReadAsStringAsync().Result == "true")
            {
                await JS.InvokeVoidAsync("alert", $"Successfully deleted charge with description: {chargeDescription}");
                // Refresh and display
                // NavManager.NavigateTo("/container-type");
                await FetchCharges();

            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Failed to delete charge with description: {chargeDescription} -- Does not exist");
            }
            //addContainerTypeReference = new();
        }

    }

    async Task FetchCharges()
    {
        // TODO: how to pick between charge code and description search term? 
        string chargeDescription = searchChargeReference.Charge_Description.Trim(); // remove leading and trailing white spaces
        List<ChargeReference> items = new List<ChargeReference>();
        if (chargeDescription == "")
        {
            items = await Http.GetFromJsonAsync<List<ChargeReference>>($"{Configuration["ApiBaseUrl"]}/api/Charge/FetchAllCharges");
        }
        else
        {
            items = await Http.GetFromJsonAsync<List<ChargeReference>>($"{Configuration["ApiBaseUrl"]}/api/Charge/FetchChargesByDescription/{chargeDescription}");
        }
        if (chargeDescription == "" && !items.Any())
        {
            await JS.InvokeVoidAsync("alert", $"No search results found");
        }
        else if (!items.Any())
        {
            await JS.InvokeVoidAsync("alert", $"No search results found for container type: {chargeDescription}");
        }
        ChargesQueryable = items.AsQueryable();
        // Refresh and display
        StateHasChanged();
    }

    // protected override void OnInitialized()
    // {
    //     ConvertListToQueryable();
    // }

    // private void ConvertListToQueryable()
    // {
    //     if (containerTypesList is null) return;
    //     foreach (var ct in containerTypesList)
    //     {
    //         ContainerTypesQueryable = ContainerTypesQueryable.Concat(new[] { ct }.AsQueryable());
    //     }
    // }

}
