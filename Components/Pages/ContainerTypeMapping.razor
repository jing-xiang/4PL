@page "/container-type-mapping"
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.QuickGrid
@using _4PL.Data
@inject IConfiguration Configuration
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavManager
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

@rendermode InteractiveServer

<PageTitle>Container Type Mapping</PageTitle>

<h3 class="container">Container Type Mapping</h3>
<div class="container">

    @if (!editTab)
    {
        <EditForm Model="addContainerTypeMapping" OnSubmit="CreateMapping" Enhance>
         <label class="label-control">Add Mapping</label>
         <div class="row">
             <div class="col-md-4">
                 <InputText @bind-Value="addContainerTypeMapping.Other_Container_Type_Name" placeholder="Other Container Type Name" class="form-control" autocomplete="off"></InputText>
             </div>
             <div class="col-md-4">
                 <InputText @bind-Value="addContainerTypeMapping.Source" placeholder="Source" class="form-control" autocomplete="off"></InputText>
             </div>
             <div class="col-md-4">
                 <label for="selectContainerType">Select Container Type:</label>
                 <InputSelect id="selectContainerType" @bind-Value="addContainerTypeMapping.Container_Type" autocomplete="off">
                     @foreach (var ct in containerTypesList) { 
                         <option value="@ct.Container_Type">@ct.Container_Type</option>
                     }
                 </InputSelect>
             </div>
         </div>
         <button type="submit" class="btn btn-primary my-2">Add</button>
     </EditForm>
    }
    else
    {
        <EditForm Model="mappingToEdit" OnSubmit="UpdateMapping" Enhance>
         <label class="label-control">Update Mapping</label>
         <div class="row">
             <div class="col-md-4">
                 <InputText @bind-Value="mappingToEdit.Other_Container_Type_Name" placeholder="Other Container Type Name" class="form-control" autocomplete="off"></InputText>
             </div>
             <div class="col-md-4">
                 <InputText @bind-Value="mappingToEdit.Source" placeholder="Source" disabled="true" class="form-control" autocomplete="off"></InputText>
             </div>
             <div class="col-md-4">
                 <label for="selectContainerType">Select Container Type:</label>
                 <InputSelect id="selectContainerType" @bind-Value="mappingToEdit.Container_Type" autocomplete="off">
                     @foreach (var ct in containerTypesList)
                        {
                            <option value="@ct.Container_Type">@ct.Container_Type</option>
                        }
                    </InputSelect>
                </div>
         </div>
         <button type="submit" class="btn btn-primary my-2">Update</button>
     </EditForm>
    }
    <EditForm Model="searchContainerTypeMapping" OnSubmit="FetchMappings" Enhance>
        <label class="label-control">Search Mapping</label>
        <div class="row">
            <div class="col-md-4">
                <InputText @bind-Value="searchContainerTypeMapping.Other_Container_Type_Name" placeholder="Other Container Type Name" class="form-control" autocomplete="off"></InputText>
            </div>
            <div class="col-md-4">
                <InputText @bind-Value="searchContainerTypeMapping.Source" placeholder="Source" class="form-control" autocomplete="off"></InputText>
            </div>
            <div class="col-md-4">
                <label for="selectContainerType">Select Container Type:</label>
                <InputSelect id="selectContainerType" @bind-Value="searchContainerTypeMapping.Container_Type" autocomplete="off">
                    @foreach (var ct in containerTypesList)
                    {
                        <option value="@ct.Container_Type">@ct.Container_Type</option>
                    }
                </InputSelect>
            </div>
        </div>
        <button type="submit" class="btn btn-primary my-2">Search</button>
    </EditForm>
    <br />
    <QuickGrid Items="@ContainerTypeMappingsQueryable" @ref="grid" Pagination="pagination">
        <PropertyColumn Title="Other Container Type Name" Property="@(c => c.Other_Container_Type_Name)" Sortable="true" InitialSortDirection="SortDirection.Ascending"></PropertyColumn>
        <PropertyColumn Title="Source" Property="@(c => c.Source)" Sortable="true" InitialSortDirection="SortDirection.Ascending"></PropertyColumn>
        <PropertyColumn Title="Container Type" Property="@(c => c.Container_Type)" Sortable="true" InitialSortDirection="SortDirection.Ascending"></PropertyColumn>
        <TemplateColumn Title="Actions">
            <button @onclick="@(() => toggleEdit(context))" class="btn btn-success">Edit</button>
            <button @onclick="@(() => DeleteMapping(context))" class="btn btn-danger">Delete</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@pagination" />

</div>

<style>
    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
        font-size: 14px;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }

    .result-container {
        width: 100%;
        overflow-x: auto;
    }

    .remarks-col {
        min-width: 300px;
    }
</style>


@code {
    IQueryable<ContainerTypeMappingReference> ContainerTypeMappingsQueryable = Enumerable.Empty<ContainerTypeMappingReference>().AsQueryable();
    private string oldChargeCode = ""; // to edit 
    private bool editTab = false;
    private ContainerTypeMappingReference mappingToEdit = new(); 
    private List<ContainerTypeReference> containerTypesList = new(); 

    [SupplyParameterFromForm]
    ContainerTypeMappingReference addContainerTypeMapping { get; set; } = new();
    [SupplyParameterFromForm]
    ContainerTypeMappingReference searchContainerTypeMapping { get; set; } = new();
    // static List<ContainerTypeReference> containerTypesList = new();

    QuickGrid<ContainerTypeMappingReference>? grid;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        containerTypesList = await Http.GetFromJsonAsync<List<ContainerTypeReference>>($"{Configuration["ApiBaseUrl"]}/api/ContainerTypeMapping/FetchContainerTypesList");
    }

    // async void toggleEdit(ChargeReference charge) {
    //     if (chargeToEdit != charge && chargeToEdit.editTab == true) {
    //         chargeToEdit.editTab = false; set the previous charge's edit tab to false
    //     }
    //     oldChargeCode = charge.Charge_Code;
    //     chargeToEdit = charge;
    //     chargeToEdit.editTab = !chargeToEdit.editTab; toggle current charge's edit tab
    // }

    // To edit 
    async void toggleEdit(ContainerTypeMappingReference mapping)
    {
        if ((mapping.Other_Container_Type_Name != mappingToEdit.Other_Container_Type_Name || mapping.Source != mappingToEdit.Source)
        && editTab == true)
        { //if the new charge to edit is different from the previous charge to edit
          //use charge description to compare as that is the unique key
            editTab = true;
        }
        else
        {
            editTab = !editTab;
        }
        // oldChargeCode = charge.Charge_Code;
        mappingToEdit = new ContainerTypeMappingReference(mapping);
    }

    async Task CreateMapping()
    {
        searchContainerTypeMapping = new(); // clear if there were previous searches
        addContainerTypeMapping.Other_Container_Type_Name = addContainerTypeMapping.Other_Container_Type_Name.Trim();// trim leading and trailing spaces
        addContainerTypeMapping.Source = addContainerTypeMapping.Source.Trim();// trim leading and trailing spaces
        addContainerTypeMapping.Container_Type = addContainerTypeMapping.Container_Type.Trim();// trim leading and trailing spaces
        if (addContainerTypeMapping.Other_Container_Type_Name == "" || addContainerTypeMapping.Source == "" || addContainerTypeMapping.Container_Type == "")
        {
            await JS.InvokeVoidAsync("alert", "Please fill in the missing field(s)");
            return;
        }
        // containerTypesList.Add(containerTypeReference);
        // ConvertListToQueryable();
        HttpResponseMessage response = await Http.PostAsJsonAsync($"{Configuration["ApiBaseUrl"]}/api/ContainerTypeMapping/CreateContainerTypeMapping", addContainerTypeMapping);
        string result = response.Content.ReadAsStringAsync().Result;
        if (result == "Error - duplicate primary keys")
        {
            await JS.InvokeVoidAsync("alert", "The inputted combination of other container type name and source already exists");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Successfully added container type mapping");
            // Navigation?
            StateHasChanged();
            //NavManager.NavigateTo("/container-type");
        }
        addContainerTypeMapping = new();
    }

    async Task DeleteMapping(ContainerTypeMappingReference mapping)
    {
        editTab = false;
        string confirmMessage = $"Confirm delete container type mapping with other name: {mapping.Other_Container_Type_Name} and source: {mapping.Source}?";
        bool confirmed = await JS.InvokeAsync<bool>("confirm", confirmMessage);
        if (confirmed)
        {
            // Debug.WriteLine($">>> Logging: {chargeDescription}");

            HttpResponseMessage result = await Http.DeleteAsync($"{Configuration["ApiBaseUrl"]}/api/ContainerTypeMapping/DeleteContainerTypeMapping/{mapping.Other_Container_Type_Name}/{mapping.Source}");
            // result = await Http.PostAsJsonAsync<string>($"{Configuration["ApiBaseUrl"]}/api/ContainerType/DeleteContainerType/{containerType}", containerType);

            Debug.WriteLine($"Logging: {result.StatusCode}");

            if (result.Content.ReadAsStringAsync().Result == "true")
            {
                await JS.InvokeVoidAsync("alert", $"Successfully deleted mapping with other name: {mapping.Other_Container_Type_Name} and source: {mapping.Source}");
                // Refresh and display
                // NavManager.NavigateTo("/container-type");
                await FetchMappings();

            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Failed to delete mapping with other name: {mapping.Other_Container_Type_Name} and source: {mapping.Source} -- Does not exist");
            }
            //addContainerTypeReference = new();
        }

    }

    async Task FetchMappings()
    {
        editTab = false;
        // check between charge code and description search term
        string otherContainerTypeName = searchContainerTypeMapping.Other_Container_Type_Name.Trim();
        // otherContainerTypeName = otherContainerTypeName != "" ? otherContainerTypeName : " "; 
        string source = searchContainerTypeMapping.Source.Trim(); // remove leading and trailing white spaces
        // source = source != "" ? source : " ";
        string containerType = searchContainerTypeMapping.Container_Type.Trim(); 
        // containerType = containerType != "" ? containerType : " ";

        List<ContainerTypeMappingReference> items = new List<ContainerTypeMappingReference>();

        // TODO: Change to just 1 API for future applications
        // 1 API pass 4 parameters, if parameter is empty then skip
        try {
            items = await Http.GetFromJsonAsync<List<ContainerTypeMappingReference>>($"{Configuration["ApiBaseUrl"]}/api/ContainerTypeMapping/FetchContainerTypeMappings/{Uri.EscapeDataString(otherContainerTypeName)}/{Uri.EscapeDataString(source)}/{Uri.EscapeDataString(containerType)}");


            if (!items.Any()) await JS.InvokeVoidAsync("alert", $"No search results found"); // TODO: possibly more descriptive error message?
        }
        catch (Exception ex) { 
            if (otherContainerTypeName.Length == 0) Debug.WriteLine($"otherContainerTypeName is empty string");
            if (source.Length == 0) Debug.WriteLine($"source is empty string");
            if (containerType.Length == 0) Debug.WriteLine($"containerType is empty string");
            foreach (ContainerTypeMappingReference item in items) { 
                Debug.WriteLine(item);
            }

            Debug.WriteLine(ex.Message);
            return; 
        }
        
        

        ContainerTypeMappingsQueryable = items.AsQueryable();
        // Refresh and display
        StateHasChanged();
    }

    // TODO: Edit the Update/Edit mapping function that calls the API
    async Task UpdateMapping()
    {
        // chargeToEdit.Charge_Code = chargeToEdit.Charge_Code.Trim();
        // if (chargeToEdit.Charge_Code == "" || chargeToEdit.Charge_Code == oldChargeCode)
        // {
        //     await JS.InvokeVoidAsync("alert", $"Please fill in a valid new charge code");
        //     return;
        // }
        // HttpResponseMessage result = await Http.PostAsJsonAsync<ChargeReference>($"{Configuration["ApiBaseUrl"]}/api/Charge/UpdateChargeCode", chargeToEdit);
        // editTab = false;
        // chargeToEdit = new();
        // await FetchCharges(); TODO: if you have 2 pages, when you change a record on page 2, will the page refresh to page 1?
        //                       Keep this way first (can enhance speed and user experience later)
        //                       Manually update ChargesQueryable


        // StateHasChanged(); the field does not change immediately unless I fetch the search again

    }

    // protected override void OnInitialized()
    // {
    //     ConvertListToQueryable();
    // }

    // private void ConvertListToQueryable()
    // {
    //     if (containerTypesList is null) return;
    //     foreach (var ct in containerTypesList)
    //     {
    //         ContainerTypesQueryable = ContainerTypesQueryable.Concat(new[] { ct }.AsQueryable());
    //     }
    // }

}

