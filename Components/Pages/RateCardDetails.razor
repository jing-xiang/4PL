@page "/ratecard/{filename}"
@inject HttpClient HttpClient
@using _4PL.Data

@inject NavigationManager NavManager

<style>
    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }
</style>

<h3>RateCard</h3>

<div>

    <table class="table">
        <thead>
            <tr>
                <th>LaneID</th>
                <th>Transport_Mode</th>
                <th>Debtor_Matchcode</th>
                <th>Debtot_Name</th>
                <th>Transport_Mode</th>
                <th>Function</th>
                <th>Rate_Validity_From</th>
                <th>Rate_Validity_To</th>
                <th>POL_Name</th>
                <th>POL_Country</th>
                <th>POL_Port</th>
                <th>POD_Name</th>
                <th>POD_Country</th>
                <th>POD_Port</th>
                <th>Creditor_Matchcode</th>
                <th>Pickup_Address</th>
                <th>Delivery_Address</th>
                <th>Dangerous_Goods</th>
                <th>Temperature_Controlled</th>
                <th>Container_Mode</th>
                <th>Container_Type</th>
                <th>Local_Currency</th>

                @for (int i = 1; i <= numCharges; i++) 
                {
                    <th>@i _Charge </th>
                    <th>@i _Calculation_Base </th>
                    <th>@i _Min </th>
                    <th>@i _Unit_Price </th>
                    <th>@i _Currency </th>
                    <th>@i _Per_% </th>
                    <th>@i _Per_Charge_Code </th>
                }

            </tr>
        </thead>

        <tbody>
            @foreach (RateCard rc in ratecards)
            {
                <tr>
                    <td>@rc.Lane_ID</td>
                    <td>@rc.Transport_Mode</td>
                    <td>@rc.Debtor_Matchcode</td>
                    <td>@rc.Debtot_Name</td>
                    <td>@rc.Transport_Mode</td>
                    <td>@rc.Function</td>
                    <td>@rc.Rate_Validity_From</td>
                    <td>@rc.Rate_Validity_To</td>
                    <td>@rc.POL_Name</td>
                    <td>@rc.POL_Country</td>
                    <td>@rc.POL_Port</td>
                    <td>@rc.POD_Name</td>
                    <td>@rc.POD_Country</td>
                    <td>@rc.POD_Port</td>
                    <td>@rc.Creditor_Matchcode</td>
                    <td>@rc.Pickup_Address</td>
                    <td>@rc.Delivery_Address</td>
                    <td>@rc.Dangerous_Goods</td>
                    <td>@rc.Temperature_Controlled</td>
                    <td>@rc.Container_Mode</td>
                    <td>@rc.Container_Type</td>
                    <td>@rc.Local_Currency</td>

                    @foreach (Charge charge in rc.Charges)
                    {
                        <td>@charge.Charge_Description</td>
                        <td>@charge.Calculation_Base</td>
                        <td>@charge.Min</td>
                        <td>@charge.Unit_Price</td>
                        <td>@charge.Currency</td>
                        <td>@charge.Per_Percent</td>
                        <td>@charge.Charge_Code</td>
                    }
                </tr>
            }
        </tbody>

    </table>
</div>

@code {
    [Parameter]
    public string filename { get; set; }
    private List<RateCard> ratecards = new();
    private RateCard ratecard;
    private int numCharges = 0;

    protected override async Task OnInitializedAsync()
    {
        ratecards = await GetRateCards();
        ratecard = ratecards[0];

        foreach (RateCard rc in ratecards)
        {
            numCharges = (rc.Charges.Count > numCharges) ? rc.Charges.Count : numCharges;
        }
    }

    async Task GetDetails(int id)
    {
        ratecard = new();
        ratecard = await HttpClient.GetFromJsonAsync<RateCard>($"{NavManager.BaseUri}api/RateCard/{id}");
    }

    async Task HandleValidSubmit()
    {
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<RateCard>($"{NavManager.BaseUri}api/RateCard", ratecard);

    }

    async Task DeleteRateCard()
    {
        // var response = HttpClient.DeleteAsync($"RateCard/{ratecard.Lane_ID}");
    }
    async Task<List<RateCard>> GetRateCards()
    {
        return await HttpClient.GetFromJsonAsync<List<RateCard>>($"{NavManager.BaseUri}api/RateCard/List/{filename}");
        // return await HttpClient.GetFromJsonAsync<List<RateCard>>("api/RateCard/List");

    }
}
