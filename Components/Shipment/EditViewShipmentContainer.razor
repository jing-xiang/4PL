@page "/shipment/edit"
@page "/shipment/view"

@using Newtonsoft.Json
@using _4PL.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.WebUtilities

@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject HttpClient HttpClient

@rendermode InteractiveServer

@if (isView)
{
    <h4>Shipment Container</h4>
} else {
    <h4>Editing Shipment Container</h4>
}

<div class="tab mb-4 btn-group" role="group">
    <button class="btn btn-outline-dark @(tab1? "active-tab-button" : "")" @onclick="(x => DisplayTab(1))">Shipment</button>
    <button class="btn btn-outline-dark @(tab2? "active-tab-button" : "")" @onclick="(x => DisplayTab(2))">Container</button>
    <button class="btn btn-outline-dark @(tab3? "active-tab-button" : "")" @onclick="(x => DisplayTab(3))">Accrual Cost</button>
</div>

@if (tab1)
{
    <div style="max-width:40vw">
    <EditForm Model="shipment" OnSubmit="UpdateShipment" Enhance>
    <div style="display: flex;">

        <!-- Left Column -->
        <div style="flex: 1; padding-right: 20px;">
            <div><label>Job No</label></div>
            <InputText @bind-Value="shipment.Job_No" disabled="true" style="width:30vw"/>

            <div><label>Master BL No</label></div>
            <InputText @bind-Value="shipment.Master_BL_No" disabled=@isView style="width:30vw" />

            <div><label>Container Mode</label></div>
            <InputText @bind-Value="shipment.Container_Mode" disabled=@isView style="width:30vw" />

            <div><label>Place Of Loading ID</label></div>
            <InputText @bind-Value="shipment.Place_Of_Loading_ID" disabled=@isView style="width:30vw" />

            <div><label>Place Of Loading Name</label></div>
            <InputText @bind-Value="shipment.Place_Of_Loading_Name" disabled=@isView style="width:30vw" />

            <div><label>Place Of Discharge ID</label></div>
            <InputText @bind-Value="shipment.Place_Of_Discharge_ID" disabled=@isView style="width:30vw" />

            <div><label>Place Of Discharge Name</label></div>
            <InputText @bind-Value="shipment.Place_Of_Discharge_Name" disabled=@isView style="width:30vw" />

            <div><label>Vessel Name</label></div>
            <InputText @bind-Value="shipment.Vessel_Name" disabled=@isView style="width:30vw" />

            <div><label>Voyage No</label></div>
            <InputText @bind-Value="shipment.Voyage_No" disabled=@isView style="width:30vw" />

            <div><label>ETD</label></div>
            <InputDate @bind-Value="shipment.ETD_Date" disabled=@isView style="width:30vw" />

            <div><label>ETA</label></div>
            <InputDate @bind-Value="shipment.ETA_Date" disabled=@isView style="width:30vw" />

            <div><label>Carrier Matchcode</label></div>
            <InputText @bind-Value="shipment.Carrier_Matchcode" disabled=@isView style="width:30vw" />

            <div><label>Carrier Name</label></div>
            <InputText @bind-Value="shipment.Carrier_Name" disabled=@isView style="width:30vw" />

        </div>

        <!-- Right Column -->
        <div style="flex: 1;">
            <div><label>Carrier Contract No</label></div>
            <InputText @bind-Value="shipment.Carrier_Contract_No" disabled=@isView style="width:30vw"/>

            <div><label>Carrier Booking Reference No</label></div>
            <InputText @bind-Value="shipment.Carrier_Booking_Reference_No" disabled=@isView style="width:30vw" />

            <div><label>Inco Terms</label></div>
            <InputText @bind-Value="shipment.Inco_Terms" disabled=@isView style="width:30vw" />

            <div><label>Controlling Customer Name</label></div>
            <InputText @bind-Value="shipment.Controlling_Customer_Name" disabled=@isView style="width:30vw" />

            <div><label>Shipper Name</label></div>
            <InputText @bind-Value="shipment.Shipper_Name" disabled=@isView style="width:30vw" />

            <div><label>Consignee Name</label></div>
            <InputText @bind-Value="shipment.Consignee_Name" disabled=@isView style="width:30vw" />

            <div><label>Total No Of Pieces</label></div>
            <InputNumber @bind-Value="shipment.Total_No_Of_Pieces" disabled=@isView style="width:30vw" />

            <div><label>Package Type</label></div>
            <InputText @bind-Value="shipment.Package_Type" disabled=@isView style="width:30vw" />

            <div><label>Total No Of Volume Weight MTQ</label></div>
            <InputNumber @bind-Value="shipment.Total_No_Of_Volume_Weight_MTQ" disabled=@isView style="width:30vw" />

            <div><label>Total No Of Gross Weight KGM</label></div>
            <InputNumber @bind-Value="shipment.Total_No_Of_Gross_Weight_KGM" disabled=@isView style="width:30vw" />

            <div><label>Description</label></div>
            <InputText @bind-Value="shipment.Description" disabled=@isView style="width:30vw" multiline="true" rows="5"/>

            <div><label>Shipment Note</label></div>
            <InputText @bind-Value="shipment.Shipment_Note" disabled=@isView style="width:30vw" />
        </div>
     </div>

    <div style="margin-top: 20px;">
         <button class="btn btn-outline-dark" type="button" @onclick="navigate">Cancel</button>
         <button class="btn btn-primary" type="submit" disabled=@isView>Save</button>
     </div>
     </EditForm>
     </div>

}
@if (tab2)
{
    <EditForm Model="container" OnSubmit="InsertContainer" Enhance>
         <label>Container No</label>
         <InputText @bind-Value="container.Container_No" disabled=@isView />

         <label>Container Type</label>
         <InputText @bind-Value="container.Container_Type" disabled=@isView />

         <label>Seal No 1</label>
         <InputText @bind-Value="container.Seal_No_1" disabled=@isView />

         <label>Seal No 2</label>
         <InputText @bind-Value="container.Seal_No_2" disabled=@isView />
         <button class ="btn btn-primary" type="submit" disabled=@(isView||chargesPresent)>Save</button>
     </EditForm>

    <div class="result-container py-4" style="max-width:80vw">
        <QuickGrid Items="@containers">
            <PropertyColumn Title="Container No" Property="@(c => c.Container_No)" Sortable="true" />
            <PropertyColumn Title="Container Type" Property="@(c => c.Container_Type)" Sortable="true" />
            <PropertyColumn Title="Seal No 1" Property="@(c => c.Seal_No_1)" Sortable="true" />
            <PropertyColumn Title="Seal No 2" Property="@(c => c.Seal_No_2)" Sortable="true" />
            <TemplateColumn Title="Actions">
                <button class="btn btn-sm btn-danger" @onclick="() => DeleteContainer(context.Shipment_Job_No, context.Container_No)" disabled=@isView>Delete</button>
            </TemplateColumn>
        </QuickGrid>
    </div>
}

@if (tab3)
{
    <EditForm Model="sc" OnSubmit="AddShipmentCharge" Enhance>
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <label class="control-label">Charge Code</label>
                    <InputText @bind-Value="sc.Charge_Code" disabled="@isView" class="form-control" />
                </div>

                <div class="form-group">
                    <label class="control-label">Charge Name</label>
                    <InputText @bind-Value="sc.Charge_Name" disabled="@isView" class="form-control" />
                </div>

                <div class="form-group">
                    <label class="control-label">Creditor Name</label>
                    <InputText @bind-Value="sc.Creditor_Name" disabled="@isView" class="form-control" />
                </div>

                <div class="form-group">
                     <label class="control-label">Charge Ex Rate</label>
                     <InputNumber @bind-Value="sc.Charge_Ex_Rate" disabled="@isView" class="form-control" />
                </div>

                 <div class="form-group">
                     <label class="control-label">VAT Code</label>
                     <InputText @bind-Value="sc.VAT_Code" disabled="@isView" class="form-control" />
                 </div>
            </div>
        </div>

        <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label class="control-label">OS Charge Currency</label>
                <InputText @bind-Value="sc.OS_Charge_Currency" disabled="@isView" class="form-control" />
            </div>

             <div class="form-group">
                 <label class="control-label">Charge Est Cost VAT OS Amount</label>
                 <InputNumber @bind-Value="sc.Charge_Est_Cost_VAT_OS_Amount" disabled="@isView" class="form-control" />
             </div>

             <div class="form-group">
                 <label class="control-label">Charge Est Cost Net OS Amount</label>
                 <InputNumber @bind-Value="sc.Charge_Est_Cost_Net_OS_Amount" disabled="@isView" class="form-control" />
             </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label class="control-label">Charge Currency</label>
                <InputText @bind-Value="sc.Charge_Currency" disabled="@isView" class="form-control" />
            </div>

             <div class="form-group">
                 <label class="control-label">Charge Est Cost VAT Amount</label>
                 <InputNumber @bind-Value="sc.Charge_Est_Cost_VAT_Amount" disabled="@isView" class="form-control" />
             </div>

             <div class="form-group">
                 <label class="control-label">Charge Est Cost Net Amount</label>
                 <InputNumber @bind-Value="sc.Charge_Est_Cost_Net_Amount" disabled="@isView" class="form-control" />
             </div>
            
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
             <div class="form-group">
                 <label class="control-label">Lane ID</label>
                 <InputText @bind-Value="sc.Lane_ID" disabled="@isView" class="form-control" />
             </div>

            <div class="form-group">
                <label class="control-label">Remarks</label>
                <InputText @bind-Value="sc.Remarks" disabled="@isView" class="form-control" multiline="true" rows="5" />
            </div>
        </div>
    </div>

    <div class="row pt-2 pb-4">
        <div class="col-md-12">
            <button class="btn btn-primary" type="submit" disabled="@isView">Save</button>
        </div>
    </div>
</EditForm>

    <button class="btn btn-success" @onclick="HandleAutoRating" disabled=@chargesPresent>Auto Rating</button>
    <div class="result-container py-4" style="max-width:80vw">
    <QuickGrid Items="@charges">
        <PropertyColumn Title="Charge Code" Property="@(c => c.Charge_Code)" Sortable="true" />
        <PropertyColumn Title="Charge Name" Property="@(c => c.Charge_Name)" Sortable="true" />
        <PropertyColumn Title="Creditor Name" Property="@(c => c.Creditor_Name)" Sortable="true" />
        <PropertyColumn Title="OS Charge Currency" Property="@(c => c.OS_Charge_Currency)" Sortable="true" />
        <PropertyColumn Title="Charge Currency" Property="@(c => c.Charge_Currency)" Sortable="true" />
        <PropertyColumn Title="Charge Ex Rate" Property="@(c => c.Charge_Ex_Rate)" Sortable="true" />
        <PropertyColumn Title="VAT Code" Property="@(c => c.VAT_Code)" Sortable="true" />
        <PropertyColumn Title="Charge Est Cost VAT OS Amount" Property="@(c => c.Charge_Est_Cost_VAT_OS_Amount)" Sortable="true" />
        <PropertyColumn Title="Charge Est Cost Net OS Amount" Property="@(c => c.Charge_Est_Cost_Net_OS_Amount)" Sortable="true" />
        <PropertyColumn Title="Charge Est Cost Gross OS Amount" Property="@(c => c.Charge_Est_Cost_Net_OS_Amount + c.Charge_Est_Cost_VAT_OS_Amount)" Sortable="true" />
        <PropertyColumn Title="Charge Est Cost VAT Amount" Property="@(c => @c.Charge_Est_Cost_VAT_Amount)" Sortable="true" />
        <PropertyColumn Title="Charge Est Cost Net Amount" Property="@(c => c.Charge_Est_Cost_Net_Amount)" Sortable="true" />
        <PropertyColumn Title="Charge Est Cost Gross Amount" Property="@(c => c.Charge_Est_Cost_Net_Amount + c.Charge_Est_Cost_VAT_Amount)" Sortable="true" />
        <PropertyColumn Title="Lane ID" Property="@(c => c.Lane_ID)" Sortable="true" />
        <PropertyColumn Title="Remarks" Property="@(c => c.Remarks)" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button class="btn btn-sm btn-danger" @onclick="() => DeleteShipmentCharge(context.Shipment_Job_No, context.Charge_Name)" disabled=@isView>Delete</button>
        </TemplateColumn>
    </QuickGrid>
    </div>
    <button class="btn btn-primary mt-4" @onclick="InsertShipmentCharge" disabled=@chargesPresent>Save</button>
}

<style>
    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
        font-size: 14px;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }

    .result-container {
        width: 100%;
        overflow-x: auto;
    }

    .active-tab-button {
        background-color: #2b2d33;
        color: white;
    }
</style>

@code {
    //tab display
    private bool tab1 = true;
    private bool tab2 = false;
    private bool tab3 = false;

    public void DisplayTab(int tabNumber)
    {
        if (tabNumber == 1)
        {
            this.tab1 = true;
            this.tab2 = false;
            this.tab3 = false;
        }
        if (tabNumber == 2)
        {
            this.tab1 = false;
            this.tab2 = true;
            this.tab3 = false;
        }

        if (tabNumber == 3)
        {
            this.tab1 = false;
            this.tab2 = false;
            this.tab3 = true;
        }
    }

    //posting form input
    [SupplyParameterFromForm]
    Shipment shipment { get; set; } = new();
    Container container { get; set; } = new();
    ShipmentCharge sc { get; set; } = new();

    List<ShipmentCharge> chargesTemp = new();
    IQueryable<ShipmentCharge> charges = Enumerable.Empty<ShipmentCharge>().AsQueryable();

    async Task UpdateShipment()
    {
        var response = await HttpClient.PostAsJsonAsync($"{NavManager.BaseUri}api/Shipment/UpdateShipment/", shipment);
        await JS.InvokeVoidAsync("alert", "Successfully Updated");
        NavManager.NavigateTo("/shipment");
    }

    async Task InsertContainer()
    {
        if (shipment.Job_No == "")
        {
            await JS.InvokeVoidAsync("alert", "Please fill in the Shipment Job No");
        }
        else if (container.Container_No == "")
        {
            await JS.InvokeVoidAsync("alert", "Please fill in the Container No");
        }
        else
        {
            container.Shipment_Job_No = shipment.Job_No;
            var response = await HttpClient.PostAsJsonAsync($"{NavManager.BaseUri}api/Shipment/CreateContainer/", container);
            await JS.InvokeVoidAsync("alert", "Successfully Added");
            var result = await getContainerData();
            containers = result.AsQueryable();
            StateHasChanged();
        }
    }

    async Task navigate()
    {
        NavManager.NavigateTo("/shipment");
    }

    async Task DeleteContainer(string Shipment_Job_No, string Container_No)
    {
        var response = await HttpClient.DeleteAsync($"{NavManager.BaseUri}api/shipment/DeleteContainer/{Shipment_Job_No}/{Container_No}");
        if (response.IsSuccessStatusCode)
        {
            var result = await getContainerData();
            containers = result.AsQueryable();
            StateHasChanged();
            await JS.InvokeVoidAsync("alert", $"Container {Container_No} has been deleted");
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error deleting container");
        }
    }

    async Task HandleAutoRating()
    {
        Tuple<List<ShipmentCharge>, List<string>> temp = await getShipmentCharges();
        chargesTemp = temp.Item1;
        List<string> containerTypeNoRatecards = temp.Item2;
        if (containerTypeNoRatecards.Any())
        {
            await JS.InvokeVoidAsync("alert", $"Failed to locate validate rate card for auto rating for Container Type(s): " + string.Join(",", containerTypeNoRatecards));
        } 
        charges = chargesTemp.AsQueryable();
        StateHasChanged();
    }

    async Task AddShipmentCharge()
    {
        chargesTemp.Add(sc);
        charges = chargesTemp.AsQueryable();
        StateHasChanged();
        sc = new ShipmentCharge();
    }

    async Task InsertShipmentCharge()
    {
        if (!chargesTemp.Any())
        {
            await JS.InvokeVoidAsync("alert", $"No charges to be saved for shipment {shipment.Job_No}, Please click the Auto Rating button to find all relevant charges");
        }
        foreach (ShipmentCharge sc in chargesTemp)
        {
            sc.Shipment_Job_No = shipment.Job_No;
        }
        var response = await HttpClient.PostAsJsonAsync($"{NavManager.BaseUri}api/Shipment/CreateShipmentCharges/", chargesTemp);
        await JS.InvokeVoidAsync("alert", $"All charges of shipment {shipment.Job_No} have been saved");
        chargesPresent = true;
    }

    async Task DeleteShipmentCharge(string Shipment_Job_No, string Charge_Name)
    {
        List<ShipmentCharge> chargesOld = await getShipmentChargesInitial();
        if (!chargesOld.Any())
        {
            chargesTemp.RemoveAll(c => c.Charge_Name == Charge_Name && c.Shipment_Job_No == Shipment_Job_No);
            charges = chargesTemp.AsQueryable();
        }
        else
        {
            chargesTemp.RemoveAll(c => c.Charge_Name == Charge_Name && c.Shipment_Job_No == Shipment_Job_No);
            charges = chargesTemp.AsQueryable();
            string encodedChargeName = Uri.EscapeDataString(Charge_Name);

            var response = await HttpClient.DeleteAsync($"{NavManager.BaseUri}api/shipment/DeleteShipmentCharge/{Shipment_Job_No}/{encodedChargeName}");
            if (response.IsSuccessStatusCode)
            {
                chargesTemp = await getShipmentChargesInitial();
                if (!chargesTemp.Any())
                {
                    chargesPresent = false;
                }
                charges = chargesTemp.AsQueryable();
                StateHasChanged();
                await JS.InvokeVoidAsync("alert", $"Charge {Charge_Name} has been deleted");
            }
            else
            {
                Console.WriteLine("Error deleting shipment charge");
            }
        }
    }

    //fetching shipment and containers data
    [Parameter]
    public string Shipment_Job_No { get; set; }
    bool isView = false;
    bool chargesPresent = false;

    IQueryable<Container> containers = Enumerable.Empty<Container>().AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        isView = NavManager.Uri.Contains("/view");
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Shipment_Job_No", out var Job_No))
        {
            Shipment_Job_No = Job_No.First();
        }
        shipment = await getShipmentData();
        var result = await getContainerData();
        containers = result.AsQueryable();
        StateHasChanged();

        chargesTemp = await getShipmentChargesInitial();
        if (chargesTemp.Any())
        {
            chargesPresent = true;
            charges = chargesTemp.AsQueryable();
            StateHasChanged();
        }
    }

    async Task<List<Container>> getContainerData()
    {

        if (Shipment_Job_No != "")
        {
            return await HttpClient.GetFromJsonAsync<List<Container>>($"{NavManager.BaseUri}api/shipment/ContainerData/{Shipment_Job_No}");
        }
        return new();
    }

    async Task<Shipment> getShipmentData()
    {
        if (Shipment_Job_No != "")
        {
            return await HttpClient.GetFromJsonAsync<Shipment>($"{NavManager.BaseUri}api/shipment/ShipmentData/{Shipment_Job_No}");
        }
        return new();
    }

    async Task<List<ShipmentCharge>> getShipmentChargesInitial()
    {
        return await HttpClient.GetFromJsonAsync<List<ShipmentCharge>>($"{NavManager.BaseUri}api/shipment/ShipmentChargesData/{Shipment_Job_No}");
    }

    async Task<Tuple<List<ShipmentCharge>, List<string>>> getShipmentCharges()
    {
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<Shipment>($"{NavManager.BaseUri}api/shipment/ShipmentCharges", shipment);
        var responseContent = await response.Content.ReadAsStringAsync();
        Tuple<List<ShipmentCharge>, List<string>> result = JsonConvert.DeserializeObject<Tuple<List<ShipmentCharge>, List<string>>>(responseContent);
        return result;
    }
}
