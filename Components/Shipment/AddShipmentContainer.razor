@page "/shipment/add"

@inject HttpClient HttpClient
@using _4PL.Data
@rendermode InteractiveServer
@inject IJSRuntime JS

@inject NavigationManager NavManager

<style>
    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }
</style>

<h3>Adding Shipment Container</h3>
<div class="tab">
    <button @onclick="(x => DisplayTab(1))">Shipment</button>
    <button @onclick="(x => DisplayTab(2))">Container</button>
</div>
@if(tab1)
{

    <EditForm Model="shipment" OnSubmit="InsertShipment" Enhance>
     <div>
         <label>Job No</label>
         <InputText @bind-Value="shipment.Job_No" />
     </div>

     <div>
         <label>Master BL No</label>
         <InputText @bind-Value="shipment.Master_BL_No" />
     </div>

     <div>
         <label>Container Mode</label>
         <InputText @bind-Value="shipment.Container_Mode" />
     </div>

     <div>
         <label>Place Of Loading ID</label>
         <InputText @bind-Value="shipment.Place_Of_Loading_ID" />
     </div>


     <div>
         <label>Place Of Loading Name</label>
         <InputText @bind-Value="shipment.Place_Of_Loading_Name" />
     </div>

     <div>
         <label>Place Of Discharge ID</label>
         <InputText @bind-Value="shipment.Place_Of_Discharge_ID" />
     </div>

     <div>
         <label>Place Of Discharge Name</label>
         <InputText @bind-Value="shipment.Place_Of_Discharge_Name" />
     </div>

     <div>
         <label>Vessel Name</label>
         <InputText @bind-Value="shipment.Vessel_Name" />
     </div>

     <div>
         <label>Voyage No</label>
         <InputText @bind-Value="shipment.Voyage_No" />
     </div>

     <div>
         <label>ETD</label>
         <InputDate @bind-Value="shipment.ETD_Date" />
     </div>

     <div>
         <label>ETA</label>
         <InputDate @bind-Value="shipment.ETA_Date" />
     </div>

     <div>
         <label>Carrier Matchcode</label>
         <InputText @bind-Value="shipment.Carrier_Matchcode" />
     </div>

     <div>
         <label>Carrier Name</label>
         <InputText @bind-Value="shipment.Carrier_Name" />
     </div>

     <div>
         <label>Carrier Contract No </label>
         <InputText @bind-Value="shipment.Carrier_Contract_No" />
     </div>

     <div>
         <label>Carrier Booking Reference No </label>
         <InputText @bind-Value="shipment.Carrier_Booking_Reference_No" />
     </div>

     <div>
         <label>Inco Terms </label>
         <InputText @bind-Value="shipment.Inco_Terms" />
     </div>

     <div>
         <label>Controlling Customer Name </label>
         <InputText @bind-Value="shipment.Controlling_Customer_Name" />
     </div>

     <div>
         <label>Shipper Name </label>
         <InputText @bind-Value="shipment.Shipper_Name" />
     </div>

     <div>
         <label>Consignee Name </label>
         <InputText @bind-Value="shipment.Consignee_Name" />
     </div>

     <div>
         <label>Total No Of Pieces </label>
         <InputNumber @bind-Value="shipment.Total_No_Of_Pieces" />
     </div>

     <div>
         <label>Package Type </label>
         <InputText @bind-Value="shipment.Package_Type" />
     </div>

     <div>
         <label>Total No Of Volume Weight MTQ </label>
         <InputNumber @bind-Value="shipment.Total_No_Of_Volume_Weight_MTQ" />
     </div>

     <div>
         <label>Total No Of Gross Weight KGM </label>
         <InputNumber @bind-Value="shipment.Total_No_Of_Gross_Weight_KGM" />
     </div>

     <div>
         <label>Description </label>
         <InputText @bind-Value="shipment.Description" />
     </div>

     <div>
         <label>Shipment Note </label>
         <InputText @bind-Value="shipment.Shipment_Note" />
     </div>

     <button type="button" @onclick="navigate">Cancel</button>
     <button type="submit">Save</button>
 </EditForm>

} 
@if(tab2) {
 <EditForm Model="container" OnSubmit="InsertContainer" Enhance>
     <label>Container No</label>
     <InputText @bind-Value="container.Container_No" />

     <label>Container Type</label>
     <InputText @bind-Value="container.Container_Type" />

     <label>Seal No 1</label>
     <InputText @bind-Value="container.Seal_No_1" />

     <label>Seal No 2</label>
     <InputText @bind-Value="container.Seal_No_2" />
     <button type="submit">Save</button>
 </EditForm>

<div>

    <table class="table">
        <thead>
            <tr>
                <th>Container No</th>
                <th>Container Type</th>
                <th>Seal No 1</th>
                <th>Seal No 2</th>
            </tr>
        </thead>

        <tbody>
            @foreach (Container c in containers)
            {
                <tr>
                    <td>@c.Container_No</td>
                    <td>@c.Container_Type</td>
                    <td>@c.Seal_No_1</td>
                    <td>@c.Seal_No_2</td>
                </tr>
            }
        </tbody>
    </table>
</div>
}

@code {
    //tab display
    private bool tab1 = true;
    private bool tab2 = false;

    public void DisplayTab(int tabNumber)
    {
        if (tabNumber == 1)
        {
            this.tab1 = true;
            this.tab2 = false;
        } 
        if (tabNumber == 2)
        {
            this.tab1 = false;
            this.tab2 = true;
        }
    }

    //posting form input
    [SupplyParameterFromForm]
    Shipment shipment { get; set; } = new();
    Container container { get; set; } = new();

    async Task InsertShipment()
    {
        if (shipment.Job_No == "")
        {
            await JS.InvokeVoidAsync("alert", "Please fill in the Shipment Job No");
        } else
        {
            HttpResponseMessage result = await HttpClient.PostAsJsonAsync($"{NavManager.BaseUri}api/Shipment/CreateShipment/", shipment);
            string response = result.Content.ReadAsStringAsync().Result;
            if (response.Equals("Error"))
            {
                await JS.InvokeVoidAsync("alert", "Shipment already exists");
            } else
            {
                await JS.InvokeVoidAsync("alert", "Successfully Added");
                NavManager.NavigateTo("/shipment");
            }
        }
    }

    async Task InsertContainer()
    {
        if (shipment.Job_No == "")
        {
            await JS.InvokeVoidAsync("alert", "Please fill in the Shipment Job No");
        }
        else if (container.Container_No == "")
        {
            await JS.InvokeVoidAsync("alert", "Please fill in the Container No");
        }
        else {
            container.Shipment_Job_No = shipment.Job_No;
            var response = await HttpClient.PostAsJsonAsync($"{NavManager.BaseUri}api/Shipment/CreateContainer/", container);
            await JS.InvokeVoidAsync("alert", "Successfully Added");
            containers = await getContainerData();
        }
    }

    async Task navigate()
    {
        NavManager.NavigateTo("/shipment");
    }


    //fetching containers data
    List<Container> containers = new List<Container>();

    protected override async Task OnInitializedAsync()
    {
        containers = await getContainerData();
    }

    async Task<List<Container>> getContainerData()
    {
        string jobno = shipment.Job_No;
        if (jobno != "") 
        {
            return await HttpClient.GetFromJsonAsync<List<Container>>($"{NavManager.BaseUri}api/shipment/ContainerData/" + jobno);
        }
        return containers;
    }
}
