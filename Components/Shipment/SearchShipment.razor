@page "/shipment/search"

@using Newtonsoft.Json
@using System.Reflection
@using _4PL.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims
@using _4PL.Components.Account.Shared
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons

@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<h5 class="mt-3">Search Shipment</h5>
<EditForm Model="shipment" OnSubmit="Search" Enhance>
    <div class="form-group">
        <div class="row">
            <div class="col-md-3">
                <label>Job No</label>
                <InputText class="form-control" @bind-Value="shipment.Job_No" />
            </div>
            <div class="col-md-3">
                <label>Master BL No</label>
                <InputText class="form-control" @bind-Value="shipment.Master_BL_No" />
            </div>
            <div class="col-md-3">
                <label>Place Of Loading Name</label>
                <InputText class="form-control" @bind-Value="shipment.Place_Of_Loading_Name" />
            </div>
            <div class="col-md-3">
                <label>Place Of Discharge Name</label>
                <InputText class="form-control" @bind-Value="shipment.Place_Of_Discharge_Name" />
            </div>
        </div>
    
        <div class="row">
            <div class="col-md-3">
                <label>Vessel Name</label>
                <InputText class="form-control" @bind-Value="shipment.Vessel_Name" />
            </div>
            <div class="col-md-3">
                <label>Voyage No</label>
                <InputText class="form-control" @bind-Value="shipment.Voyage_No" />
            </div>
            <div class="col-md-1" style="width: 12.499999995%">
                <label>ETD From</label>
                <InputDate class="form-control" @bind-Value="shipment.ETD_Date_From" />
            </div>
            <div class="col-md-1" style="width: 12.499999995%">
                <label>ETD To</label>
                <InputDate class="form-control" @bind-Value="shipment.ETD_Date_To" />
            </div>
            <div class="col-md-1" style="width: 12.499999995%">
                <label>ETA From</label>
                <InputDate class="form-control" @bind-Value="shipment.ETA_Date_From" />
            </div>
            <div class="col-md-1" style="width: 12.499999995%">
                <label>ETA To</label>
                <InputDate class="form-control" @bind-Value="shipment.ETA_Date_To" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-3">
                <label>Container No</label>
                <InputText class="form-control" @bind-Value="container.Container_No" />
            </div>
            <div class="col-md-3">
                <label>Container Type</label>
                <InputText class="form-control" @bind-Value="container.Container_Type" />
            </div>
            <div class="col-md-1">
                <button type="submit" class="btn btn-sm mt-2 btn-primary mt-md-4">Search</button>
            </div>
        </div>
    </div>

</EditForm>

@if (currViewInitialised)
{
    <div class="d-flex justify-content-between">
        <div>
            <select @onchange="e => ChangeDisplay(e.Value.ToString())" class="mt-3 px-2 py-1 rounded-1">
                @foreach (var l in layoutArray)
                {
                    <option value="@l" selected="@((l == defaultLayoutName) ? "selected" : null)">@l</option>
                }
            </select>
            <button style="background-color:transparent; border-radius: 5px; margin-top: 10px; padding-top: 4px; padding-left:4px; padding-right:4px;" @onclick="HandleMenu">
                <SfIcon Name="IconName.MoreVertical" Size="IconSize.Medium"></SfIcon>
            </button>
            @if (showMenu)
            {
                <div class="custom-menu">
                    <select @bind="selectedLayout" class="px-2 py-1 rounded-1">
                        @foreach (var l in layoutArray)
                        {
                            <option value=@l selected="@((l == defaultLayoutName) ? "selected" : null)">@l</option>
                        }
                    </select>
                    <button class="btn btn-sm btn-primary" @onclick="ChangeDefault">Make this a default</button>
                </div>
            }
        </div>
        <button style="background-color:transparent; border-radius: 5px; margin-top: 10px; padding-top: 4px; padding-left:4px; padding-right:4px;" @onclick="HandleModal">
            <SfIcon Name="IconName.Adjustment" Size="IconSize.Large"></SfIcon>
        </button>
    </div>
    @if(showModal)
    {
        <div class="d-flex justify-content-end">
            <div class="custom-modal">
                <div class="select-all-checkbox d-flex justify-content-end">
                    <input type="checkbox" @bind="selectAllSelected" @onclick="SelectAll" />
                </div>
                <QuickGrid Items="shipmentProperties">
                    <PropertyColumn Title="Shipment Fields" Property="@(p => p.PropertyInfo.Name)" />
                    <PropertyColumn Title="Data Type" Property="@(p => p.PropertyInfo.PropertyType)" />
                    <TemplateColumn>
                        <input type="checkbox" @bind="context.IsSelected"/>
                    </TemplateColumn>
                </QuickGrid>

                <div class="share-layout">
                    <div>
                        <input type="text" @bind="newLayoutName" placeholder="Enter Layout Name" class="form-control-sm mt-2" />
                    </div>
                    <div class="d-flex share-input">
                        <input type="email" @bind="newEmail" placeholder="Enter Email" class="form-control-sm mt-2" style="margin-right: 8px"/>
                        <button @onclick="AddEmail" class="btn btn-sm mt-2 btn-primary">Add</button>
                    </div>
                    <div class="shared-emails d-flex">
                        @foreach (var email in sharedEmails)
                        {
                            <span class="email-tag">
                                <span>@email</span>
                                <button @onclick="() => RemoveEmail(email)" class="cancel-btn" style="background-color:transparent; border:none">×</button>
                            </span>
                        }
                    </div>
                </div>
                <div class="d-flex justify-content-end mt-2">
                    <button class="btn btn-sm btn-success" style="margin-right: 5px" @onclick="InsertLayout">Update</button>
                    <button class="btn btn-sm btn-outline-dark" @onclick="CancelInsertLayout">Cancel</button>
                </div>
            </div>
        </div>
    }
}

<div class="result-container py-2" style="max-width:80vw">
    <QuickGrid Items="@shipments" Pagination="@pagination">
        <TemplateColumn Title="Job No" >
            <a href="/shipment/view?Shipment_Job_No=@context.Job_No" class="text-decoration-none font-weight-bold">
                @context.Job_No
            </a>
        </TemplateColumn>

        @if(currViewInitialised)
        {
            @foreach(var col in currView)
            {
                <PropertyColumn Title="@col.Replace("_", " ")" Property="@(s => s.GetType().GetProperty(col).GetValue(s, null))" Sortable="true" />
            }
        }

        <TemplateColumn Title ="Actions">
            <button class="btn btn-sm btn-success" @onclick="() => navigateEdit(context.Job_No)">Edit</button>
            <button class="btn btn-sm btn-danger" @onclick="() => DeleteShipment(context.Job_No)">Delete</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@pagination" />
</div>

<style>
    .result-container {
        width: 100%;
        overflow-x: auto;
    }

    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        font-size: 14px;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }

    .custom-modal {
        position: fixed;
        z-index: 9999; 
        background-color: white; 
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); 
        max-height:40vh;
        overflow-y:scroll;
    }

    .select-all-checkbox {
        position: absolute;
        top: 32px;
        right: 46px;
        z-index: 99999;
    }

    .shared-emails {
        max-width: 30vw;
    }

    .email-tag {
        border: 1px solid #9999;
        border-radius: 10px;
        padding-left: 8px;
        padding-right: 5px;
        margin-top: 5px;
        margin-right: 5px;
    }

    .custom-menu {
        position: fixed;
        z-index: 9999;
        background-color: white;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    }
</style>

@code {
    [SupplyParameterFromForm]
    ShipmentSearchModel shipment { get; set; } = new();
    Container container { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<Shipment> shipments = Enumerable.Empty<Shipment>().AsQueryable();

    public async void Search()
    {
        var result = await getShipmentData();
        if (result != null && result.Any())
        {
            shipments = result.AsQueryable();
            StateHasChanged();
        } else
        {
            await JS.InvokeVoidAsync("alert", $"No shipment found");
        }

    }

    async Task<List<Shipment>> getShipmentData()
    {
        ShipmentSearchModel s = new();
        Container c = new();
        s.Job_No = string.IsNullOrEmpty(shipment.Job_No) ? "%" : "%" + shipment.Job_No + "%";
        s.Master_BL_No = string.IsNullOrEmpty(shipment.Master_BL_No) ? "%" : "%" + shipment.Master_BL_No + "%";
        s.Place_Of_Loading_Name = string.IsNullOrEmpty(shipment.Place_Of_Loading_Name) ? "%" : "%" + shipment.Place_Of_Loading_Name + "%";
        s.Place_Of_Discharge_Name = string.IsNullOrEmpty(shipment.Place_Of_Discharge_Name) ? "%" : "%" + shipment.Place_Of_Discharge_Name + "%";
        s.Vessel_Name = string.IsNullOrEmpty(shipment.Vessel_Name) ? "%" : "%" + shipment.Vessel_Name + "%";
        s.Voyage_No = string.IsNullOrEmpty(shipment.Voyage_No) ? "%" : "%" + shipment.Voyage_No + "%";
        s.ETD_Date_From = shipment.ETD_Date_From;
        s.ETD_Date_To = shipment.ETD_Date_To;
        s.ETA_Date_From = shipment.ETA_Date_From;
        s.ETA_Date_To = shipment.ETA_Date_To;
        c.Container_No = string.IsNullOrEmpty(container.Container_No) ? "%" : "%" + container.Container_No + "%";
        c.Container_Type = string.IsNullOrEmpty(container.Container_Type) ? "%" : container.Container_Type + "%";
        HttpResponseMessage response =  await HttpClient.PostAsJsonAsync<Tuple<ShipmentSearchModel, Container>>($"{NavManager.BaseUri}api/Shipment/Search/", new Tuple<ShipmentSearchModel, Container>(s, c));
        var responseContent = await response.Content.ReadAsStringAsync();
        List<Shipment> result = JsonConvert.DeserializeObject<List<Shipment>>(responseContent);
        return result;
    }


    private void navigateEdit(string Job_No)
    {
        NavManager.NavigateTo($"/shipment/edit?Shipment_Job_No={Job_No}");
    }

    private void navigateView(string Job_No)
    {
        NavManager.NavigateTo($"/shipment/view?Shipment_Job_No={Job_No}");
    }

    async Task DeleteShipment(string Job_No)
    {
        var response = await HttpClient.DeleteAsync($"{NavManager.BaseUri}api/shipment/DeleteShipment/{Job_No}");
        if (response.IsSuccessStatusCode)
        {
            var result = await getShipmentData();
            shipments = result.AsQueryable();
            StateHasChanged();
            await JS.InvokeVoidAsync("alert", $"Shipment {Job_No} has been deleted");
        }
        else
        {
            Console.WriteLine("Error deleting shipment");
        }
    }

    //Changing layout view
    Dictionary<string, UserProfileLayout> profileLayouts = new();
    string[]? currView;
    string[]? layoutArray;
    string? selectedLayout;
    string? defaultLayoutName;

    IQueryable<PropertyInfoWrapper> shipmentProperties = Enumerable.Empty<PropertyInfoWrapper>().AsQueryable();
    bool currViewInitialised = false;

    async void ChangeDisplay(string layoutName)
    {
        Console.WriteLine(layoutName);
        currView = profileLayouts[layoutName].Layout_Fields;
    }

    public async void HandleMenu()
    {
        showMenu = !showMenu;
    }

    async void ChangeDefault()
    {
        var response = await HttpClient.PostAsJsonAsync($"{NavManager.BaseUri}api/UserProfileLayout/UpdateDefaultLayout/", profileLayouts[selectedLayout]);
        await JS.InvokeVoidAsync("alert", "Successfully Updated");
        showMenu = !showMenu;
        defaultLayoutName = selectedLayout;
        currView = profileLayouts[defaultLayoutName].Layout_Fields;
        StateHasChanged();
    }

    //Layout adjustment modal, share view 
    bool showModal = false;
    bool showMenu = false;
    List<string> sharedEmails = new List<string>();
    string newEmail = "";
    string newLayoutName = "";
    string? currEmail;
    bool selectAllSelected = false;

    public async void HandleModal()
    {
        showModal = !showModal;
        List<PropertyInfoWrapper> propertiesTemp = shipmentProperties.ToList();
        propertiesTemp.ForEach(prop =>
        {
            if (currView.Contains(prop.PropertyInfo.Name))
            {
                prop.IsSelected = true;
            }
        });
        shipmentProperties = propertiesTemp.AsQueryable();
        StateHasChanged();
    }

    void AddEmail()
    {
        if (!string.IsNullOrEmpty(newEmail) && !sharedEmails.Contains(newEmail))
        {
            sharedEmails.Add(newEmail);
            StateHasChanged();
            newEmail = "";
        }
    }

    void RemoveEmail(string email)
    {
        sharedEmails.Remove(email);
        StateHasChanged();
    }

    async Task InsertLayout()
    {
        Console.WriteLine("InsertLayout");
        string[] Layout_Fields = GetSelectedProperties();
        Console.WriteLine("Lyoutfields: " + string.Join(", ", Layout_Fields));
        List<UserProfileLayout> userProfileLayouts = new();

        UserProfileLayout self = new();
        self.User_Email = currEmail;
        self.Table_Name = "Shipment";
        self.Layout_Fields = Layout_Fields;
        self.Layout_Name = newLayoutName;
        userProfileLayouts.Add(self);

        foreach (var email in sharedEmails)
        {
            UserProfileLayout upl = new();
            upl.User_Email = email;
            upl.Table_Name = "Shipment";
            upl.Layout_Fields = Layout_Fields;
            upl.Layout_Name = newLayoutName;
            userProfileLayouts.Add(upl);
        }
        var response = await HttpClient.PostAsJsonAsync($"{NavManager.BaseUri}api/UserProfileLayout/CreateLayout/", userProfileLayouts);
        var insertResult = response.Content.ReadAsStringAsync().Result;
        newLayoutName = "";
        sharedEmails = new List<string>();
        if (insertResult.Equals("Success"))
        {
            await JS.InvokeVoidAsync("alert", "Successfully Added");
        }
        else if (insertResult.Contains("Layout name exists"))
        {
            var isConfirmed = await JS.InvokeAsync<bool>("confirm", insertResult);
            if (isConfirmed)
            {
                var response2 = await HttpClient.PostAsJsonAsync($"{NavManager.BaseUri}api/UserProfileLayout/UpdateLayout/", userProfileLayouts);
                var updateResult = response2.Content.ReadAsStringAsync().Result;
                await JS.InvokeVoidAsync("alert", updateResult);
            }
        } else
        {
            await JS.InvokeVoidAsync("alert", insertResult);
        }
    }

    void CancelInsertLayout()
    {
        newLayoutName = "";
        sharedEmails = new List<string>();
        newEmail = "";
    }

    void SelectAll()
    {
        List<PropertyInfoWrapper> propertiesTemp = shipmentProperties.ToList();
        if (!selectAllSelected)
        {
            propertiesTemp.ForEach(prop => prop.IsSelected = true);

        }
        else
        {
            propertiesTemp.ForEach(prop => prop.IsSelected = false);
        }
        shipmentProperties = propertiesTemp.AsQueryable();
        StateHasChanged();
        selectAllSelected = !selectAllSelected;
    }

    string[] GetSelectedProperties()
    {
        string[] output = shipmentProperties.Where(p => p.IsSelected).Select(p => p.PropertyInfo.Name).ToArray();
        return output;
    }

    async Task<Dictionary<string, UserProfileLayout>> GetProfileLayout(string currEmail)
    {
        Console.WriteLine(currEmail);
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<Tuple<string, string>>($"{NavManager.BaseUri}api/UserProfileLayout/GetUserLayouts/", new Tuple<string, string>(currEmail, "Shipment"));
        var responseContent = await response.Content.ReadAsStringAsync();
        Dictionary<string, UserProfileLayout> result = JsonConvert.DeserializeObject<Dictionary<string, UserProfileLayout>>(responseContent);
        Console.WriteLine(string.Join(", ", result.Keys.ToList()));
        return result;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currEmail = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
        profileLayouts = await GetProfileLayout(currEmail);

        layoutArray = profileLayouts.Keys.ToArray();

        var findDefault = profileLayouts.FirstOrDefault(x => x.Value.Is_Default).Value;

        //handle if user not in table, if none of the is_default is true
        if (findDefault != null)
        {
            currView = findDefault.Layout_Fields;
            var temp = profileLayouts.FirstOrDefault(x => x.Value.Is_Default).Key;
            selectedLayout = temp;
            defaultLayoutName = temp;
        } 
        else if (findDefault == null && profileLayouts.Any()) {
            defaultLayoutName = layoutArray[0];
            selectedLayout = layoutArray[0];
            currView = profileLayouts[defaultLayoutName].Layout_Fields;
        } 
        else {
            currView = ["Master_BL_No", "Container_Mode", "Place_Of_Loading_ID", "Place_Of_Loading_Name", "Place_Of_Discharge_ID", "Place_Of_Discharge_Name", "Vessel_Name", "Voyage_No", "ETD_Date", "ETA_Date",
                "Carrier_Matchcode", "Carrier_Name", "Carrier_Contract_No", "Carrier_Booking_Reference_No", "Inco_Terms", "Controlling_Customer_Name", "Shipper_Name", "Consignee_Name", "Total_No_Of_Pieces", "Package_Type", 
                "Total_No_Of_Volume_Weight_MTQ", "Total_No_Of_Gross_Weight_KGM", "Description", "Shipment_Note"];
        }

        Console.WriteLine(string.Join(", ", currView));
        var props = typeof(Shipment).GetProperties(BindingFlags.Instance | BindingFlags.Public)
            .Where(p => p.CanRead && p.Name != "Container_List" && p.Name != "Last_Modified_At" && p.Name != "Last_Modified_By" && p.Name != "Job_No")
            .ToList();

        List<PropertyInfoWrapper> shipmentPropertiesTemp = new();
        foreach(var prop in props)
        {
            PropertyInfoWrapper p = new();
            p.PropertyInfo = prop;
            p.IsSelected = false;
            shipmentPropertiesTemp.Add(p);
        }
        shipmentProperties = shipmentPropertiesTemp.AsQueryable();

        currViewInitialised = true;
    }

    public class PropertyInfoWrapper
    {
        public PropertyInfo PropertyInfo { get; set; }
        public bool IsSelected { get; set; }
    }
}